<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zymonster.mapper.VideosMapperCustom">
    <resultMap id="BaseResultMap" type="com.zymonster.pojo.vo.VideosVO">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="audio_id" property="audioId" jdbcType="VARCHAR"/>
        <result column="video_desc" property="videoDesc" jdbcType="VARCHAR"/>
        <result column="video_path" property="videoPath" jdbcType="VARCHAR"/>
        <result column="video_seconds" property="videoSeconds" jdbcType="REAL"/>
        <result column="video_width" property="videoWidth" jdbcType="INTEGER"/>
        <result column="video_height" property="videoHeight" jdbcType="INTEGER"/>
        <result column="cover_path" property="coverPath" jdbcType="VARCHAR"/>
        <result column="like_counts" property="likeCounts" jdbcType="BIGINT"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="tags_id" property="tagsId" jdbcType="TIMESTAMP"/>
        <result column="face_image" property="faceImage" jdbcType="VARCHAR"/>
        <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
        <result column="tags_name" property="tagsName" jdbcType="VARCHAR"/>
        <result column="visit_counts" property="visitCounts" javaType="java.lang.Integer" jdbcType="INTEGER"/>

    </resultMap>

    <update id="deleteVideoInfo" >
        update `videos` set  `status` = 3 where id = #{videoId}
    </update>

    <select id="queryAllVideos" resultMap="BaseResultMap" parameterType="String">

        select table1.*,table2.tags_name from (select a.*,b.visit_counts from
        (
        select v.id as id,
        v.user_id as user_id,
        v.audio_id as audio_id,
        v.video_desc as video_desc,
        v.video_path as video_path,
        v.video_seconds as video_seconds,
        v.video_width as video_width,
        v.video_height as video_height,
        v.cover_path as cover_path,
        v.like_counts as like_counts,
        v.tags_id as tags_id,
        v.status as `status`,
        v.create_time as create_time,
        u.face_image as face_image,
        u.nickname as nickname
        from videos v
        left join users u on u.id = v.user_id
        where
        1 = 1
        <if test=" videoDesc != null and videoDesc != '' ">
            and v.video_desc like '%${videoDesc}%'
        </if>
        <if test=" userId != null and userId != '' ">
            and v.user_id = #{userId}
        </if>

        and
        v.status = 1
        order by v.create_time desc
        )a
        left join
        (select video_id,count(*) as visit_counts
        from video_history
        group by video_id)b
        on
        a.id = b.video_id
        order by a.create_time desc)table1
        left join
        (select tags.id as `tags_id`,tags.name as `tags_name` from videos v,tags where v.tags_id = tags.id)table2
        on table1.tags_id = table2.tags_id
        group by table1.id
        order by table1.create_time desc


    </select>

    <select id="queryAllRecommandVideos" resultMap="BaseResultMap" parameterType="String">

        select table1.*,table2.tags_name from (select a.*,b.visit_counts from
        (
        select v.id as id,
        v.user_id as user_id,
        v.audio_id as audio_id,
        v.video_desc as video_desc,
        v.video_path as video_path,
        v.video_seconds as video_seconds,
        v.video_width as video_width,
        v.video_height as video_height,
        v.cover_path as cover_path,
        v.like_counts as like_counts,
        v.tags_id as tags_id,
        v.status as `status`,
        v.create_time as create_time,
        u.face_image as face_image,
        u.nickname as nickname
        from videos v
        left join users u on u.id = v.user_id
        where
        1 = 1
        and
        v.status = 1
        and
        v.tags_id = #{tagsId}
        order by v.create_time desc
        )a
        left join
        (select video_id,count(*) as visit_counts
        from video_history
        group by video_id)b
        on
        a.id = b.video_id
        order by a.create_time desc)table1
        left join
        (select tags.id as `tags_id`,tags.name as `tags_name` from videos v,tags where v.tags_id = tags.id)table2
        on table1.tags_id = table2.tags_id
        group by table1.id
        order by table1.create_time desc

    </select>

    <select id="queryOneVideoInfo" resultMap="BaseResultMap" parameterType="String">

        select a.*,b.visit_counts from
        (
        select v.id as id,
        v.user_id as user_id,
        v.audio_id as audio_id,
        v.video_desc as video_desc,
        v.video_path as video_path,
        v.video_seconds as video_seconds,
        v.video_width as video_width,
        v.video_height as video_height,
        v.cover_path as cover_path,
        v.like_counts as like_counts,
        v.status as `status`,
        v.create_time as create_time,
        v.tags_id as tags_id,
        u.face_image as face_image,
        u.nickname as nickname
        from videos v
        left join users u on u.id = v.user_id
        where
        1 = 1
        and v.id = #{videoId}
        and
        v.status = 1
        order by v.create_time desc
        )a
        left join
        (select video_id,count(*) as visit_counts
        from video_history
        group by video_id)b
        on
        a.id = b.video_id
        order by a.create_time desc


    </select>

    <select id="queryVideoList" resultType="String" parameterType="String">
        select id from videos where id != #{videoId}
        and videos.status = 1
    </select>

    <!-- 查询我关注的人发的视频 -->
    <select id="queryMyFollowVideos" resultMap="BaseResultMap" parameterType="String">
		select v.*,u.face_image as face_image,u.nickname as nickname from videos v
		left join users u on v.user_id = u.id
		where
			v.user_id in (select uf.user_id from users_fans uf where uf.fan_id = #{userId})
			and v.status = 1
			order by v.create_time desc
	</select>

    <!-- 查询我喜欢的视频 -->
    <select id="queryMyLikeVideos" resultMap="BaseResultMap" parameterType="String">
		select v.*,u.face_image as face_image,u.nickname as nickname from videos v
		left join users u on v.user_id = u.id
		where
			v.id in (select ulv.video_id from users_like_videos ulv where ulv.user_id = #{userId})
			and v.status = 1
			order by v.create_time desc
	</select>


    <update id="addVideoLikeCount" parameterType="String">
  	update videos set like_counts=like_counts+1 where id=#{videoId}
  </update>

    <update id="reduceVideoLikeCount" parameterType="String">
  	update videos set like_counts=like_counts-1 where id=#{videoId}
  </update>

</mapper>
